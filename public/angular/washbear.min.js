(function() {

  angular.module('washbear', ['ngResource', 'ngRoute']);

  // endpoints are declared here
  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: '/home/home.view.html',
        controller: 'homeCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/register', {
        templateUrl: '/form/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/user/:id', {
        templateUrl: '/user/user.view.html',
        controller: 'userCtrl',
        controllerAs: 'vm'
      })
      .when('/players', {
        templateUrl: '/players/players.view.html',
        controller: 'playersCtrl',
        controllerAs: 'vm'
      })
      .when('/leagues', {
        templateUrl: '/league/league.view.html',
        //controller: 'playersListCtrl',
        controllerAs: 'vm'
      })
      .when('/tournaments', {
        templateUrl: '/tournament/tournament.view.html',
        //controller: 'playersListCtrl',
        controllerAs: 'vm'
      })
      .when('/teams', {
        templateUrl: '/teams/teams.view.html',
        controller: 'teamsCtrl',
        controllerAs: 'vm'
      })
      .when('/team/:id', {
        templateUrl: '/teams/team.view.html',
        controller: 'teamCtrl',
        controllerAs: 'vm'
      })
      .when('/events/:id', {
        templateUrl: '/event/event.view.html',
        controller: 'eventCtrl',
        controllerAs: 'vm'
      })
      .otherwise({
        redirectTo: '/'
      });

      $locationProvider.html5Mode(true);

  }

  angular
    .module('washbear')
    .config(['$routeProvider', '$locationProvider', config]);

})();

(function() {

  angular
    .module('washbear')
    .service('authentication', authentication);

  authentication.$inject = ['$http', '$window'];

  function authentication($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['washbear-token'] = token;
    };

    var getToken = function() {
      return $window.localStorage['washbear-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();

      if (token) {
        var payload = JSON.parse($window.atob(token.split('.')[1]));
        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function() {
      if (isLoggedIn()) {
        var token = getToken();
        var payload = JSON.parse($window.atob(token.split('.')[1]));
        return payload.nickname;
      }
    };

    var currentUserId = function() {
      if (isLoggedIn()) {
        var token = getToken();
        var payload = JSON.parse($window.atob(token.split('.')[1]));
        return payload._id;
      }
    };

    register = function(user) {
      return $http.post('/api/users', user).success(function(data) {
        //saveToken(data.token);
      });
    };

    update = function(userId, user) {
      var url = ('/api/users/' + userId);
      var currentUser = currentUserId();
      // quick check to see if currently logged in user is in fact the one to update
      if(currentUser === userId) {
        return $http.put(url, user).success(function(data) {
          // should we do something here? :D
        });
      }
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function() {
      $window.localStorage.removeItem('washbear-token');
    };

    return {
      currentUser: currentUser,
      currentUserId: currentUserId,
      saveToken: saveToken,
      getToken: getToken,
      isLoggedIn: isLoggedIn,
      register: register,
      update: update,
      login: login,
      logout: logout
    };
  }

})();

// controller wrapped in anonymous function
// to isolate the code from global scope

(function() {

  angular
    .module('washbear')
    .controller('homeCtrl', homeCtrl);

  homeCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

  function homeCtrl($scope, $resource, $location, authentication) {
    var vm = this;

    vm.isLoggedIn = authentication.isLoggedIn();

    vm.logout = function() {
      authentication.logout();
      $location.path('/');
    };
  }

})();
(function() {

  angular
    .module('washbear')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];

  function registerCtrl($location, authentication) {
    var vm = this;

    vm.pageHeader = {
      title: 'Uusi pelaajatili'
    };

    vm.birthdayPartials = {
      birthdayDay: "",
      birthdayMonth: "",
      birthdayYear: "",
    }

    vm.credentials = {
      firstname: "",
      lastname: "",
      nickname: "",
      birthday: "",
      email: "",
      streetAddress: "",
      postalCode: "",
      city: "",
      country: "",
      phone: "",
      website: "",
      password: "",
      verifyPassword: ""
    };

    vm.returnPage = $location.search().page || '/';

    vm.onSubmit = function() {
      vm.formError = "";
      if (!vm.credentials.firstname ||
        !vm.credentials.lastname ||
        !vm.credentials.nickname ||
        !vm.credentials.email ||
        !vm.birthdayPartials.birthdayDay ||
        !vm.birthdayPartials.birthdayMonth ||
        !vm.birthdayPartials.birthdayYear ||
        !vm.credentials.streetAddress ||
        !vm.credentials.postalCode ||
        !vm.credentials.city ||
        !vm.credentials.country ||
        !vm.credentials.phone ||
        !vm.credentials.website ||
        !vm.credentials.password  ||
        !vm.credentials.verifyPassword) {
        vm.formError = "Täytä kaikki kentät";
        return false;
      } else if (vm.credentials.password !== vm.credentials.verifyPassword) {
        vm.formError = "Salasanat eivät täsmää";
        return false;
      } else {
        vm.credentials.birthday = new Date(vm.birthdayPartials.birthdayYear,
            vm.birthdayPartials.birthdayMonth,
            vm.birthdayPartials.birthdayDay)
          .toISOString();
        vm.doRegister();
      }
    };

    vm.doRegister = function() {
      vm.formError = "";
      authentication
        .register(vm.credentials)
        .error(function(err) {
          vm.formError = err;
        })
        .then(function() {
          $location.search('page', null);
          $location.path(vm.returnPage);
        });
    };

  }

})();

(function() {

  angular
    .module('washbear')
    .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];

  function loginCtrl($location, authentication) {
    var vm = this;

    vm.pageHeader = {
      title: 'Kirjaudu Washbeariin'
    };

    vm.credentials = {
      username: "",
      password: ""
    };

    vm.returnPage = $location.search().page || '/';

    vm.onSubmit = function() {
      vm.formError = "";
      if (!vm.credentials.username || !vm.credentials.password) {
        vm.formError = "Vaadittavia tietoja puuttuu";
        return false;
      } else {
        vm.doLogin();
      }
    };

    vm.doLogin = function() {
      vm.formError = "";
      authentication
        .login(vm.credentials)
        .error(function(err) {
          vm.formError = err;
        })
        .then(function() {
          $location.search('page', null);
          $location.path(vm.returnPage);
        });
    };

  }

})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('playersCtrl', playersCtrl);

  playersCtrl.$inject = ['$scope', 'playerDataservice'];

  function playersCtrl($scope, playerDataservice) {

    var vm = this;

    vm.players = [];

    activate();

    function activate() {
      return getPlayers().then(function() {
        console.info('Activated Players View');
      });
    }

    function getPlayers() {
      return playerDataservice.getPlayers().then(function(data) {
        vm.players = data;
        return vm.players;
      });
    }

  }

}());

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('eventsCtrl', eventsCtrl);

  eventsCtrl.$inject = ['$scope', 'eventDataservice'];

  function eventsCtrl($scope, eventDataservice) {

    var vm = this;

    vm.events = [];

    ////

    activate();

    ////

    function activate() {
      return getEvents().then(function() {
        console.info('Activated Events View');
      });
    }

    function getEvents() {
      console.info('getEvents');
      return eventDataservice.getEvents().then(function(data) {
        vm.events = data;
        return vm.events;
      });
    }

  }

}());

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('eventCtrl', eventCtrl);

  eventCtrl.$inject = ['$scope', '$routeParams', 'eventDataservice', 'gameDataservice'];

  function eventCtrl($scope, $routeParams, eventDataservice, gameDataservice) {

    var vm = this;

    vm.event = [];
    vm.eventId = $routeParams.id;

    ////

    activate();

    ////

    function activate() {
      vm.games = gameDataservice.getGames;
      return getEvent().then(function() {
        console.info('Activated Events View');
      });
    }

    function getEvent() {
      return eventDataservice.getEventById(vm.eventId).then(function(data) {
        vm.event = data;
        return vm.event;
      });
    }

  }

}());

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('teamsCtrl', teamsCtrl);

  teamsCtrl.$inject = ['$scope', '$location', 'teamDataservice', 'authentication'];

  function teamsCtrl($scope, $location, teamDataservice, authentication) {
    var vm = this;

    vm.teams = [];

    vm.credentials = {
      name: "",
      adminUser: "",
      additionalInfo: ""
    };

    //vm.returnPage = $location.search().page || '/';

    vm.isLoggedIn = authentication.isLoggedIn;

    ////

    activate();

    ////

    function activate() {
      return getTeams().then(function() {
        console.info('Activated Teams View');
      });
    }

    function getTeams() {
      return teamDataservice.getTeams().then(function(data) {
        vm.teams = data;
        return vm.teams;
      });
    }

    vm.onSubmit = function onSubmit() {
      vm.formError = "";
      vm.credentials.adminUser = authentication.currentUserId();

      if (!vm.credentials.name || !vm.credentials.adminUser || !vm.credentials.additionalInfo) {
        vm.formError = "Täytä kaikki kentät";
        return false;
      } else {
        vm.doCreateTeam();
      }
    }

    vm.doCreateTeam = function() {
      vm.formError = "";
      teamDataservice
        .createTeam(vm.credentials)
        .error(function(err) {
          vm.formError = err;
        })
        .then(function() {
          // TODO close modal
          
          activate();
        });
    };

  }

})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('teamCtrl', teamCtrl);

  teamCtrl.$inject = ['$scope', '$routeParams', 'authentication', 'playerDataservice', 'teamDataservice'];

  function teamCtrl($scope, $routeParams, authentication, playerDataservice, teamDataservice) {

    var vm = this;

    var teamId = $routeParams.id;

    vm.joinTeam = joinTeam;
    vm.leaveTeam = leaveTeam;

    vm.isLoggedIn = authentication.isLoggedIn();

    ////

    activate();

    ////

    function activate() {
      return getTeam().then(function() {
        // this variable must be post activation!
        vm.userAlreadyInTeam = userAlreadyInTeam;
        getCaptain();
        console.info('Activated Team View');
      });

      function getTeam() {
        return teamDataservice.getTeam(teamId).then(function(data) {
          vm.team = data;
          return vm.team;
        });
      }

      function getCaptain() {
        return playerDataservice.getPlayerById(vm.team._adminUser).then(function(data) {
          vm.team.captain = data;
          return vm.team;
        });
      }
    }

    function joinTeam() {
      teamDataservice.addPlayer(loggedInUser(), vm.team._id)
        .then(function() {
          activate();
        }
      );
    }

    function leaveTeam() {
      teamDataservice.removePlayer(loggedInUser(), vm.team._id)
        .then(function() {
          activate();
      });
    }

    function loggedInUser() {
      return authentication.currentUserId();
    }

    function userAlreadyInTeam() {
      for (var i = 0; i < vm.team.players.length; i++) {
        if (vm.team.players[i]._id === loggedInUser()) {
          console.log('User found.');
          return true;
        }
      }
      console.log('User NOT found.');
      return false;
    }
  }

})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .controller('userCtrl', userCtrl);

  userCtrl.$inject = ['$scope', '$routeParams', '$location', 'playerDataservice', 'authentication'];

  function userCtrl($scope, $routeParams, $location, playerDataservice, authentication) {
    var vm = this;
    var playerId = $routeParams.id;

    vm.player = [];

    vm.isInEditMode = false;

    vm.credentials = {
      firstname: "",
      lastname: "",
      nickname: "",
      birthday: "",
      email: "",
      additionalInfo: "",
      streetAddress: "",
      postalCode: "",
      city: "",
      country: "",
      phone: "",
      website: ""/*,
      password: "",
      verifyPassword: ""*/
    };

    activate();

    function activate() {
      return getPlayer().then(function() {
        if(vm.isEditable() && vm.isInEditMode) {
          // populate credentials in order to prefill the form
          vm.credentials.firstname = vm.player.firstname;
          vm.credentials.lastname = vm.player.lastname;
          vm.credentials.nickname = vm.player.nickname;
          vm.credentials.additionalInfo = vm.player.additionalInfo;
          vm.credentials.birthday = vm.player.birthday;
          vm.credentials.email = vm.player._contactInfo.email;
          vm.credentials.streetAddress = vm.player._contactInfo.streetAddress;
          vm.credentials.postalCode = vm.player._contactInfo.postalCode;
          vm.credentials.city = vm.player._contactInfo.city;
          vm.credentials.country = vm.player._contactInfo.country;
          vm.credentials.phone = vm.player._contactInfo.phone;
          vm.credentials.website = vm.player._contactInfo.website;
        }
        console.info('Activated Player View');
      });
    }

    function getPlayer() {
      return playerDataservice.getPlayerById(playerId).then(function(data) {
        vm.player = data;
        return vm.player;
      });
    }

    vm.enterEditMode = function() {
      vm.isInEditMode = true;
      activate();
    }

    vm.isEditable = function() {
      return playerId === authentication.currentUserId();
    };

    vm.onSubmit = function() {
      vm.formError = "";
      if (!vm.credentials.firstname ||
          !vm.credentials.lastname ||
          !vm.credentials.nickname ||
          !vm.credentials.email ||
          !vm.credentials.birthday ||
          !vm.credentials.streetAddress ||
          !vm.credentials.postalCode ||
          !vm.credentials.city ||
          !vm.credentials.country ||
          !vm.credentials.phone ||
          !vm.credentials.website /*||
          !vm.credentials.password  ||
          !vm.credentials.verifyPassword*/)
      {
        // debug
        console.log(vm.credentials);

        vm.formError = "Täytä kaikki kentät";
        return false;
      } else {
        vm.doUpdate();
      }
    };

    vm.doUpdate = function() {
      vm.formError = "";
      authentication
        .update(playerId, vm.credentials)
        .error(function(err) {
          vm.formError = err;
        })
        .then(function() {
          vm.isInEditMode = false;
          activate();
        });
    };
  }

}());

(function() {
  'use strict';

  angular
    .module('washbear')
    .factory('eventDataservice', eventDataservice);

  eventDataservice.$inject = ['$http'];

  function eventDataservice($http) {

    var baseURL = '/api/events';

    ////

    return {
      getEvents: getEvents,
      getEventById: getEventById
    };

    ////

    function getEvents() {
      return $http.get(baseURL)
        .then(getEventsComplete)
        .catch(getEventsFailed);

      function getEventsComplete(response) {
        return response.data;
      }

      function getEventsFailed(error) {
        console.error('XHR Failed for getEvents.' + error.data);
      }
    }

    function getEventById(eventId) {
      var eventURL = baseURL + '/' + eventId;
      return $http.get(eventURL)
        .then(getEventComplete)
        .catch(getEventFailed);

      function getEventComplete(response) {
        return response.data;
      }

      function getEventFailed(error) {
        console.error('XHR Failed for getEventById.' + error.data);
      }
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .factory('playerDataservice', playerDataservice);

  playerDataservice.$inject = ['$http', '$filter'];

  function playerDataservice($http, $filter) {

    var baseURL = '/api/users';

    ////

    return {
      getPlayers: getPlayers,
      getPlayerById: getPlayerById,
      getPlayerByNickname: getPlayerByNickname
    };

    ////

    function getPlayerById(id) {
      var userURL = (baseURL + '/' + id);
      return $http.get(userURL)
        .then(getPlayerByIdComplete)
        .catch(getPlayerByIdFailed);

      function getPlayerByIdComplete(response) {
        return response.data;
      }

      function getPlayerByIdFailed(error) {
        console.error('XHR Failed for getPlayerById.' + error.data);
      }
    }

    function getPlayerByNickname(nick) {
      return $http.get(baseURL)
        .then(getPlayerByNicknameComplete)
        .catch(getPlayerByNicknameFailed);

      function getPlayerByNicknameComplete(response) {
        return $filter('filter')(response, { nickname : nick }, false);
      }

      function getPlayerByNicknameFailed(error) {
        console.error('XHR Failed for getPlayerByNickname.' + error.data);
      }
    }

    function getPlayers() {
      return $http.get(baseURL)
        .then(getPlayersComplete)
        .catch(getPlayersFailed);

      function getPlayersComplete(response) {
        return response.data;
      }

      function getPlayersFailed(error) {
        console.error('XHR Failed for getPlayers.' + error.data);
      }
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .factory('teamDataservice', teamDataservice);

  teamDataservice.$inject = ['$http'];

  function teamDataservice($http) {
    var baseURL = '/api/teams';

    var createTeam = function(team) {
      return $http.post(baseURL, team).success(function(data) {
        // should we do something here?
      });
    };

    ////

    return {
      addPlayer: addPlayer,
      createTeam: createTeam,
      getTeam: getTeam,
      getTeams: getTeams,
      getTeamByName: getTeamByName,
      removePlayer: removePlayer
    };

    ////

    function addPlayer(playerId, teamId) {
      var addPlayerURL = (baseURL + '/' + teamId + '/addplayer/' + playerId);

      return $http.post(addPlayerURL)
        .then(addPlayerComplete)
        .catch(addPlayerFailed);

      function addPlayerComplete(response) {
        return response.data;
      }

      function addPlayerFailed(error) {
        console.error('XHR Failed for addplayer.' + error.data);
      }
    }

    function getTeam(id) {
      var teamURL = (baseURL + '/' + id);
      return $http.get(teamURL)
        .then(getTeamComplete)
        .catch(getTeamFailed);

      function getTeamComplete(response) {
        return response.data;
      }

      function getTeamFailed(error) {
        console.error('XHR Failed for getTeam.' + error.data);
      }
    }

    function getTeams() {
      return $http.get(baseURL)
        .then(getTeamsComplete)
        .catch(getTeamsFailed);

      function getTeamsComplete(response) {
        return response.data;
      }

      function getTeamsFailed(error) {
        console.error('XHR Failed for getTeams.' + error.data);
      }
    }

    function getTeamByName(name) {
      return $http.get(baseURL)
        .then(getTeamByNameComplete)
        .catch(getTeamByNameFailed);

      function getTeamByNameComplete(response) {
        return $filter('filter')(response, { name : name }, false);
      }

      function getTeamByNameFailed(error) {
        console.error('XHR Failed for getTeamByName.' + error.data);
      }
    }

    function removePlayer(playerId, teamId) {
      var removePlayerURL = (baseURL + '/' + teamId + '/removeplayer/' + playerId);

      return $http.delete(removePlayerURL)
        .then(removePlayerComplete)
        .catch(removePlayerFailed);

      function removePlayerComplete(response) {
        return response.data;
      }

      function removePlayerFailed(error) {
        console.error('XHR Failed for removePlayer.' + error.data);
      }
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('washbear')
    .factory('gameDataservice', gameDataservice);

  gameDataservice.$inject = ['$http'];

  function gameDataservice($http) {

    var baseURL = '/api/games';

    ////

    return {
      getGames: getGames,
      getGameById: getGameById
    };

    ////

    function getGames() {
      return $http.get(baseURL)
        .then(getEventsComplete)
        .catch(getEventsFailed);

      function getEventsComplete(response) {
        return response.data;
      }

      function getEventsFailed(error) {
        console.error('XHR Failed for getGames.' + error.data);
      }
    }

    function getGameById(gameId) {
      var gameURL = baseURL + '/' + gameId;
      return $http.get(gameURL)
        .then(getGameComplete)
        .catch(getGameFailed);

      function getGameComplete(response) {
        return response.data;
      }

      function getGameFailed(error) {
        console.error('XHR Failed for getGameById.' + error.data);
      }
    }
  }
})();

(function () {
  angular
    .module('washbear')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['$location', 'authentication'];

  function navigationCtrl($location, authentication) {

    var vm = this;

    vm.currentPath = $location.path();
    vm.currentUser = authentication.currentUser();
    vm.currentUserId = authentication.currentUserId();
    vm.isLoggedIn = authentication.isLoggedIn();
    vm.logout = logout;

    function logout() {
      authentication.logout();
      $location.path('/');
    }

    /*function HeaderController($scope, $location) {
      vm.isActive = function (viewLocation) {
        return viewLocation === $location.path();
      };
    }*/

  }
})();

(function() {

  angular
    .module('washbear')
    .directive('footerGeneric', footerGeneric);

  function footerGeneric() {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/footer/footerGeneric.template.html'
    };
  }

})();

(function() {

  angular
    .module('washbear')
    .directive('navigation', navigation);

  function navigation() {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();

(function() {

  angular
    .module('washbear')
    .directive('sideNavigation', sideNavigation);

  function sideNavigation() {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/sidenav/sideNavigation.template.html'
    };
  }

})();

(function() {

  angular
    .module('washbear')
    .directive('notification', notification);

  function notification() {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/notification/notification.template.html'
    };
  }

})();

(function() {

  angular
    .module('washbear')
    .directive('adbannerLeft', adbannerLeft);

  function adbannerLeft() {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/ads/adbannerLeft/adbannerLeft.template.html'
    };
  }

})();
